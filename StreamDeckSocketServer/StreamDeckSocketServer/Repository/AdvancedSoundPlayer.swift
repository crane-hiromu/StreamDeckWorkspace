//
//  AdvancedSoundPlayer.swift
//  StreamDeckSocketServer
//
//  Created by h.tsuruta on 2025/08/31.
//

import Foundation
import AVFoundation

// MARK: - Advanced Player (Pitch Preservation)
final class AdvancedSoundPlayer {
    static let shared = AdvancedSoundPlayer()
    
    // „É¨„Éº„ÉàË™øÊï¥Áî®ÂÆöÊï∞
    private static let rateMin: Float = 0.5
    private static let rateMax: Float = 3.0
    private static let rateBase: Float = 1.2
    // Á¥ØÁ©ç„Çπ„ÉÜ„ÉÉ„ÉóÔºàÂõûËª¢„ÅÆÁ∑èÂíå„Çí‰øùÊåÅ„Åó„Å¶ÂèØÈÄÜÊÄß„ÇíÊãÖ‰øùÔºâ
    private var cumulativeStep: Float = 0

    private var audioEngine: AVAudioEngine?
    private var audioPlayerNode: AVAudioPlayerNode?
    private var timePitchNode: AVAudioUnitTimePitch?
    private var currentAudioFile: AVAudioFile?
    
    private init() {}
    
    func playSoundWithPitchPreservation(named soundName: String, 
                                       ext: String = "mp3",
                                       rate: Float = 1.0) {

        guard let url = Bundle.main.url(forResource: soundName, withExtension: ext) else {
            print("‚ùå Audio file not found: \(soundName)")
            return
        }
        
        do {
            // Êó¢Â≠ò„ÅÆ„Ç®„É≥„Ç∏„É≥„ÇíÂÅúÊ≠¢„Éª„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
            stopAndCleanup()
            
            // „Ç™„Éº„Éá„Ç£„Ç™„Ç®„É≥„Ç∏„É≥„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
            audioEngine = AVAudioEngine()
            audioPlayerNode = AVAudioPlayerNode()
            timePitchNode = AVAudioUnitTimePitch()
            
            guard let engine = audioEngine,
                  let playerNode = audioPlayerNode,
                  let timePitch = timePitchNode else { 
                print("‚ùå Failed to create audio components")
                return 
            }
            
            // „Ç™„Éº„Éá„Ç£„Ç™„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
            currentAudioFile = try AVAudioFile(forReading: url)
            guard let audioFile = currentAudioFile else { return }
            
            // „Éé„Éº„Éâ„ÇíÊé•Á∂ö
            engine.attach(playerNode)
            engine.attach(timePitch)
            
            engine.connect(playerNode, to: timePitch, format: audioFile.processingFormat)
            engine.connect(timePitch, to: engine.mainMixerNode, format: audioFile.processingFormat)
            
            // ÈÄüÂ∫¶Â§âÊõ¥Ôºà„Éî„ÉÉ„ÉÅ„ÅØ‰øùÊåÅÔºâ
            timePitch.rate = rate
            // ÁèæÂú®„ÅÆ„É¨„Éº„Éà„Åã„ÇâÁ¥ØÁ©ç„Çπ„ÉÜ„ÉÉ„Éó„ÇíÂàùÊúüÂåñ
            if rate > 0 {
                cumulativeStep = logf(rate) / logf(Self.rateBase)
            } else {
                cumulativeStep = 0
            }
            
            // „Ç®„É≥„Ç∏„É≥„ÇíÈñãÂßã
            try engine.start()
            
            // ÂÜçÁîüÈñãÂßã
            playerNode.scheduleFile(audioFile, at: nil) { [weak self] in
                // ÂÜçÁîüÂÆå‰∫ÜÊôÇ„ÅÆÂá¶ÁêÜ
                DispatchQueue.main.async {
                    self?.stopAndCleanup()
                }
            }
            playerNode.play()
            
            print("üéµ Playing \(soundName) with rate: \(rate) (pitch preserved)")
            
        } catch {
            print("‚ùå Failed to play with pitch preservation: \(error)")
        }
    }
        
    // „Çπ„ÉÜ„ÉÉ„ÉóÂÄ§„Åã„ÇâÂÜçÁîü„É¨„Éº„Éà„ÇíÁÆóÂá∫ÔºàÁ≠âÊØî„Çπ„Ç±„Éº„É´Ôºâ
    static func rate(for step: Int) -> Float {
        let clampedStep = max(min(step, 8), -8)
        let computed = powf(Self.rateBase, Float(clampedStep))
        return min(max(computed, Self.rateMin), Self.rateMax)
    }
    
    // „Çπ„ÉÜ„ÉÉ„ÉóÊåáÂÆö„Åß„É¨„Éº„ÉàÂ§âÊõ¥ÔºàÊÑüÂ∫¶1/5„ÉªÁ¥ØÁ©çÂèØÈÄÜÔºâ
    func changeRate(step: Int) {
        let rawDelta = max(min(step, 8), -8)
        guard rawDelta != 0 else { return }

        // ÊÑüÂ∫¶„Çí1/5„Å´Ê∏õË°∞ÔºàÁ¨¶Âè∑Á∂≠ÊåÅÔºâ
        let attenuated = Float(rawDelta) / 5.0

        // Á¥ØÁ©ç„Åó„Å¶„Åã„Çâ„É¨„Éº„ÉàÁÆóÂá∫ÔºàÂ∑¶Âè≥ÂõûËª¢„ÅßÂèØÈÄÜÔºâ
        cumulativeStep = max(min(cumulativeStep + attenuated, 24.0), -24.0)
        let computed = powf(Self.rateBase, cumulativeStep)
        let clamped = min(max(computed, Self.rateMin), Self.rateMax)
        changeRate(clamped)
    }

    // ÂÜçÁîü‰∏≠„ÅÆÈÄüÂ∫¶Â§âÊõ¥
    private func changeRate(_ rate: Float) {
        guard let timePitch = timePitchNode,
              let playerNode = audioPlayerNode,
              playerNode.isPlaying else {
            print("‚ùå No audio playing or components not available")
            return
        }
        timePitch.rate = rate
        print("üéµ Playback rate changed to: \(rate)")
    }

    // ÈÄüÂ∫¶„Çí„Éá„Éï„Ç©„É´„ÉàÂÄ§„Å´Êàª„Åô
    func resetRate() {
        changeRate(1.0)
        cumulativeStep = 0
    }

    // ÁèæÂú®„ÅÆÂÜçÁîüÈÄüÂ∫¶„ÇíÂèñÂæó
    func getCurrentRate() -> Float {
        timePitchNode?.rate ?? 1.0
    }
    
    // ÂÜçÁîü‰∏≠„Åã„Å©„ÅÜ„ÅãÁ¢∫Ë™ç
    func isPlaying() -> Bool {
        audioPlayerNode?.isPlaying ?? false
    }
    
    // ÂÅúÊ≠¢
    func stop() {
        audioPlayerNode?.stop()
        stopAndCleanup()
    }
    
    // „Éó„É©„Ç§„Éô„Éº„Éà„É°„ÇΩ„ÉÉ„Éâ
    private func stopAndCleanup() {
        audioPlayerNode?.stop()
        audioEngine?.stop()
        audioEngine = nil
        audioPlayerNode = nil
        timePitchNode = nil
        currentAudioFile = nil
    }
}
